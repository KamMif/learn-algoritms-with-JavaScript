/*
  При бинарном поиске мы подаем на вход отсортированный список элементов, в процессе поиска мы получаем искомый элемент или null;
  При бинарном поиске берется первая половина массива и если элемент находится в этом диапазоне, оставшаяся часть отбрасывается, 
  таким образом сокращается время поиска и эффективность алгоритма по сравнению с простым перебором.
  В общем случае бинарный поиск выполняется за log2N шагов. 
  Небольшой ликбез в логарифмы: log2N - это степень в которую нужно возвести 2 чтобы получить N, то есть сколько раз нужно перемножить 2 саму на себя чтобы получить N
  Пример: каково максимальное число итераций для поиска числа в диапазоне от 1 до 100 с помощью бинарного поиска? для ясности будем округлять в большую строну
  1) 100\2 = 50 - проверяем входит ли искомое число в диапазон от 0 до 50, если да отбрасываем оставшиеся числа.
  2) 50\2 = 25 - проверяем и отбрасываем лишнее.
  3) 25\2 = 13 - проверяем и отбрасываем лишнее.
  4) 13\2 = 7 - проверяем и отбрасываем лишнее.
  5) 7\2 = 4 - проверяем и отбрасываем лишнее.
  6) 4\2 = 2 - проверяем и отбрасываем лишнее
*/

/* Реализация бинарного поиска на JavaScript */

exports.binary_search  = (list, item) => {
  let low = 0
  let hight = (list.length - 1);

  while (low <= hight) {
    mid = ( low + hight )
    guess = list[mid]
    if (guess == item) {
      return mid
    } else if (guess > item) {
      hight = mid - 1 
    } else {
      low = mid + 1
    }
  } return 0
}